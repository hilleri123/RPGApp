version: '3.8'

services:
  app:
    build: ./RPGdata
    ports:
      - "8000:8000"
    volumes:
      - ./RPGdata:/app
    depends_on:
      db:
        condition: service_healthy
      # mongodb:
      #   condition: service_healthy
      minio:
        condition: service_healthy
          #      minio-init:
          #        condition: service_completed_successfully
      redis:
        condition: service_healthy
    environment:
      - S3_ENDPOINT=http://minio:9000
      - PG_ENDPOINT=postgresql://db:5432
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=rpg_sessions
      - SECRET_KEY=your-secret-key-change-in-production
      - MONGODB_URL=mongodb://admin:admin@mongodb:27017/game_sessions_db?authSource=admin
    env_file:
      - ./.env.minio
      - ./.env.tgbot
    restart: unless-stopped


  web-client:
    build:
      context: ./RPGWebMainClient
      # dockerfile: Dockerfile
    working_dir: /app/RPGWebMainClient
    ports:
      - "3000:3000"
    volumes:
      - .:/app
      - /app/.next
      - /app/node_modules
    depends_on:
      - app
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=https://byury.online/api
      # - WATCHPACK_POLLING=true
    restart: unless-stopped
    command: pnpm dev 
  #   command: sh -c "pnpm install && pnpm dev"

  db:
    image: postgres:15
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=rpg_sessions
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 2s

  # mongodb:
  #   image: mongo:7.0
  #   container_name: game-sessions-mongodb
  #   restart: always
  #   ports:
  #     - "27017:27017"
  #   volumes:
  #     - mongodb_data:/data/db
  #     - mongodb_config:/data/configdb
  #   environment:
  #     - MONGO_INITDB_ROOT_USERNAME=admin
  #     - MONGO_INITDB_ROOT_PASSWORD=admin
  #     - MONGO_INITDB_DATABASE=game_sessions
  #     - MONGODB_LOG_LEVEL=warning
  #   command: mongod --quiet --logpath /dev/null
  #   healthcheck:
  #     test: ["CMD", "mongosh", "--eval", "db.runCommand('ping').ok"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5
  #     start_period: 30s

  minio:
    image: minio/minio
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    command: server --console-address ":9001" /data
    env_file:
      - ./.env.minio
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  minio-init:
    image: minio/mc
    depends_on:
      - minio
    env_file:
      - .env.minio
    entrypoint: >
      /bin/sh -c "
      until /usr/bin/mc alias set myminio http://minio:9000 $MINIO_ROOT_USER $MINIO_ROOT_PASSWORD; do
        echo 'Ждем доступности MinIO...';
        sleep 1;
      done;
      /usr/bin/mc mb myminio/rpg-assets --ignore-existing;
      /usr/bin/mc anonymous set download myminio/rpg-assets;
      echo 'MinIO инициализирован!';
      exit 0;
      "

  redis:
    image: redis/redis-stack:latest
    volumes:
      - redis_data:/redis_data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 3s
    # networks:
    #   - app-network
  
        #  zookeeper:
        #    image: confluentinc/cp-zookeeper:latest
        #    environment:
        #      ZOOKEEPER_CLIENT_PORT: 2181
        #      ZOOKEEPER_TICK_TIME: 2000
    # networks:
    #   - app-network


volumes:
  postgres_data:
  minio_data:
  mongodb_data:
  mongodb_config:
  static_volume:
  media_volume:
  redis_data:

   
# networks:
#   app-network:
#     driver: bridge

