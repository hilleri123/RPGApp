version: '3.8'

services:
  app:
    build: ./RPGdata
    ports:
      - "8001:8000"
    volumes:
      - ./RPGdata:/app
    depends_on:
      - db
      - minio
      - minio-init
    environment:
      - S3_ENDPOINT=http://minio:9000
      - PG_ENDPOINT=postgresql://db:5432
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=rpg_sessions
      - SECRET_KEY=your-secret-key-change-in-production
    env_file:
      - ./.env.minio

  game-sessions:
    build: ./RPGQtWebApp
    ports:
      - "8000:8000"
    volumes:
      - ./RPGQtWebApp:/app
    depends_on:
      db:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=rpg_sessions
      - SECRET_KEY=your-secret-key-change-in-production
    restart: unless-stopped

  frontend-dev:
    build:
      context: ./RPGFrontendReact
      target: development
    ports:
      - "3001:3000"
    volumes:
      - ./RPGFrontendReact/frontend:/app:delegated
      - /app/node_modules
    depends_on:
      - app
    environment:
      - CHOKIDAR_USEPOLLING=true
      - WDS_SOCKET_PORT=3000
      - REACT_APP_API_URL=http://localhost:8000

  # Опциональная конфигурация для продакшена
  frontend-prod:
    build:
      context: .
      target: production
    ports:
      - "80:80"
    depends_on:
      - app
    restart: unless-stopped
    profiles:
      - prod

  db:
    image: postgres:15
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=rpg_sessions
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Новый сервис для React TypeScript приложения
  web-client:
    build:
      context: ./RPGWebMainClient
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    volumes:
      - ./RPGWebMainClient:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - game-sessions
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:8000
    restart: unless-stopped

  mongodb:
    image: mongo:7.0
    container_name: game-sessions-mongodb
    restart: always
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=admin
      - MONGO_INITDB_DATABASE=game_sessions
      - MONGODB_LOG_LEVEL=warning
    command: mongod --quiet --logpath /dev/null
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.runCommand('ping').ok"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  minio:
    image: minio/minio
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    command: server --console-address ":9001" /data
    env_file:
      - ./.env.minio
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  minio-init:
    image: minio/mc
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      until /usr/bin/mc config host add myminio http://minio:9000 minioadmin minioadmin; do
        echo 'Ждем доступности MinIO...';
        sleep 1;
      done;
      /usr/bin/mc mb myminio/rpg-assets --ignore-existing;
      /usr/bin/mc policy set download myminio/rpg-assets;
      echo 'MinIO инициализирован!';
      exit 0;
      "

volumes:
  postgres_data:
  minio_data:
  mongodb_data:
  mongodb_config:
  static_volume:
  media_volume:
